diff --git a/Makefile b/Makefile
index 74e454f..2d9a763 100644
--- a/Makefile
+++ b/Makefile
@@ -194,6 +194,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
 
 
 
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..6684cbb 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -318,6 +318,8 @@ fork(void)
   np->parent = p;
   release(&wait_lock);
 
+  np->trace_mask = p->trace_mask;
+
   acquire(&np->lock);
   np->state = RUNNABLE;
   release(&np->lock);
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..964fb3b 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int trace_mask;  // Mask bật/tắt trace syscall
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..f0f3a40 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,22 +127,60 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
 };
 
-void
+// Định nghĩa tên các system calls dưới dạng chuỗi ký tự
+static char *syscall_names[] = {
+    [SYS_fork]    "fork",
+    [SYS_exit]    "exit",
+    [SYS_wait]    "wait",
+    [SYS_pipe]    "pipe",
+    [SYS_read]    "read",
+    [SYS_kill]    "kill",
+    [SYS_exec]    "exec",
+    [SYS_fstat]   "fstat",
+    [SYS_chdir]   "chdir",
+    [SYS_dup]     "dup",
+    [SYS_getpid]  "getpid",
+    [SYS_sbrk]    "sbrk",
+    [SYS_sleep]   "sleep",
+    [SYS_uptime]  "uptime",
+    [SYS_open]    "open",
+    [SYS_write]   "write",
+    [SYS_mknod]   "mknod",
+    [SYS_unlink]  "unlink",
+    [SYS_link]    "link",
+    [SYS_mkdir]   "mkdir",
+    [SYS_close]   "close",
+    [SYS_trace]   "trace",  // Thêm sys_trace vào mảng syscall_names
+};
+
+void 
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
 
-  num = p->trapframe->a7;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    // Use num to lookup the system call function for num, call it,
-    // and store its return value in p->trapframe->a0
+  num = p->trapframe->a7;  // Lấy số hiệu system call từ trapframe
+
+  // Kiểm tra xem số hiệu có hợp lệ không và có syscall tương ứng không
+  if (num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    
+    // Kiểm tra nếu tiến trình đang theo dõi system call này
+    if (p->trace_mask & (1 << num)) {
+      // Nếu trace được bật, in log về system call
+      printf("%d: syscall %s -> %ld\n", p->pid, syscall_names[num], p->trapframe->a0);
+
+    }
+
+    // Gọi hàm xử lý tương ứng với system call và lưu kết quả vào p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    
   } else {
+    // Nếu system call không hợp lệ, in ra thông báo lỗi
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
-    p->trapframe->a0 = -1;
+    p->trapframe->a0 = -1;  // Gán giá trị lỗi cho a0
   }
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..cc112b9 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..19652ca 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,16 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64 sys_trace(void) {
+    int mask;
+    // Lấy tham số từ user space
+    argint(0, &mask);
+    if (mask < 0)
+      return -1;
+
+    // Lưu giá trị mask vào struct proc của tiến trình hiện tại
+    struct proc *p = myproc();
+    p->trace_mask = mask;
+    return 0;
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..6f5f27d
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,16 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+    if (argc < 3) {
+        printf("Usage: trace mask program [args...]\n");
+        exit(1);
+    }
+
+    int mask = atoi(argv[1]);
+    trace(mask);
+
+    exec(argv[2], &argv[2]);
+    exit(0);
+}
diff --git a/user/user.h b/user/user.h
index f16fe27..1e59c66 100644
--- a/user/user.h
+++ b/user/user.h
@@ -41,3 +41,6 @@ void *memcpy(void *, const void *, uint);
 // umalloc.c
 void* malloc(uint);
 void free(void*);
+
+// system_call_trace
+int trace(int mask);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..9c97b05 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
